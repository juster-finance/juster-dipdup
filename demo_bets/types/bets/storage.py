# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel


class Key(BaseModel):
    address: str
    nat: Optional[str]


class BetsAgainstWinningLedgerItem(BaseModel):
    key: Key
    value: str


class Key1(BaseModel):
    address: str
    nat: Optional[str]


class BetsForWinningLedgerItem(BaseModel):
    key: Key1
    value: str


class Key2(BaseModel):
    address: str
    nat: Optional[str]


class DepositedBet(BaseModel):
    key: Key2
    value: str


class Value(BaseModel):
    betsAgainstLiquidityPoolSum: str
    betsCloseTime: str
    betsForLiquidityPoolSum: str
    closedDynamics: str
    closedOracleTime: str
    closedRate: str
    createdTime: str
    currencyPair: str
    expirationFee: str
    firstProviderAgainstSharesSum: str
    firstProviderForSharesSum: str
    isBetsForWin: bool
    isClosed: bool
    isMeasurementStarted: bool
    liquidityPercent: str
    liquidityPrecision: str
    measureOracleStartTime: str
    measurePeriod: str
    measureStartFee: str
    oracleAddress: str
    ratioPrecision: str
    rewardCallFee: str
    sharePrecision: str
    startRate: str
    targetDynamics: str
    targetDynamicsPrecision: str
    totalLiquidityAgainstSharesSum: str
    totalLiquidityForSharesSum: str
    totalLiquidityProvided: str
    winAgainstProfitLossPerShare: str
    winForProfitLossPerShare: str


class Event(BaseModel):
    key: Optional[str]
    value: Value


class Key3(BaseModel):
    address: str
    nat: Optional[str]


class LiquidityAgainstSharesLedgerItem(BaseModel):
    key: Key3
    value: str


class Key4(BaseModel):
    address: str
    nat: Optional[str]


class LiquidityForSharesLedgerItem(BaseModel):
    key: Key4
    value: str


class Key5(BaseModel):
    address: str
    nat: Optional[str]


class ProvidedLiquidityLedgerItem(BaseModel):
    key: Key5
    value: str


class Key6(BaseModel):
    address: str
    nat: Optional[str]


class WinAgainstProfitLossPerShareAtEntryItem(BaseModel):
    key: Key6
    value: str


class Key7(BaseModel):
    address: str
    nat: Optional[str]


class WinForProfitLossPerShareAtEntryItem(BaseModel):
    key: Key7
    value: str


class BetsStorage(BaseModel):
    betsAgainstWinningLedger: List[BetsAgainstWinningLedgerItem]
    betsForWinningLedger: List[BetsForWinningLedgerItem]
    closeCallEventId: Optional[str]
    depositedBets: List[DepositedBet]
    events: List[Event]
    lastEventId: Optional[str]
    liquidityAgainstSharesLedger: List[LiquidityAgainstSharesLedgerItem]
    liquidityForSharesLedger: List[LiquidityForSharesLedgerItem]
    measurementStartCallEventId: Optional[str]
    providedLiquidityLedger: List[ProvidedLiquidityLedgerItem]
    winAgainstProfitLossPerShareAtEntry: List[WinAgainstProfitLossPerShareAtEntryItem]
    winForProfitLossPerShareAtEntry: List[WinForProfitLossPerShareAtEntryItem]
