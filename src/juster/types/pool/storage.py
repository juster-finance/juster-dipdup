# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Dict
from typing import List
from typing import Optional

from pydantic import BaseModel
from pydantic import Extra


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    eventId: str
    provider: str


class Claim(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: str


class DurationPoints(BaseModel):
    class Config:
        extra = Extra.forbid

    amount: str
    updateLevel: str


class Entries(BaseModel):
    class Config:
        extra = Extra.forbid

    acceptAfter: str
    amount: str
    provider: str


class Events(BaseModel):
    class Config:
        extra = Extra.forbid

    claimed: str
    provided: str
    result: Optional[str]


class Lines(BaseModel):
    class Config:
        extra = Extra.forbid

    advanceTime: str
    betsPeriod: str
    currencyPair: str
    isPaused: bool
    juster: str
    lastBetsCloseTime: str
    liquidityPercent: str
    maxEvents: str
    measurePeriod: str
    minBettingPeriod: str
    rateAboveEq: str
    rateBelow: str
    targetDynamics: str


class PoolStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    activeEvents: Dict[str, str]
    activeLiquidityF: str
    claims: List[Claim]
    durationPoints: Dict[str, DurationPoints]
    entries: Dict[str, Entries]
    entryLiquidityF: str
    entryLockPeriod: str
    events: Dict[str, Events]
    isDepositPaused: bool
    isDisbandAllow: bool
    lines: Dict[str, Lines]
    manager: str
    maxEvents: str
    metadata: Dict[str, str]
    nextEntryId: str
    nextLineId: str
    precision: str
    proposedManager: str
    shares: Dict[str, str]
    totalDurationPoints: str
    totalShares: str
    withdrawableLiquidityF: str
