# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel


class Key(BaseModel):
    address: str
    nat: str


class BetsAgainstItem(BaseModel):
    key: Key
    value: str


class Key1(BaseModel):
    address: str
    nat: str


class BetsForItem(BaseModel):
    key: Key1
    value: str


class Key2(BaseModel):
    address: str
    nat: str


class DepositedBet(BaseModel):
    key: Key2
    value: str


class Events(BaseModel):
    betsCloseTime: str
    closedDynamics: str
    closedOracleTime: str
    closedRate: str
    createdTime: str
    currencyPair: str
    expirationFee: str
    isBetsForWin: bool
    isClosed: bool
    isForceMajeure: bool
    isMeasurementStarted: bool
    liquidityPercent: str
    maxAllowedMeasureLag: str
    measureOracleStartTime: str
    measurePeriod: str
    measureStartFee: str
    minPoolSize: str
    oracleAddress: str
    poolAgainst: str
    poolFor: str
    rewardCallFee: str
    startRate: str
    targetDynamics: str
    totalLiquidityShares: str


class Key3(BaseModel):
    address: str
    nat: str


class LiquidityShare(BaseModel):
    key: Key3
    value: str


class NewEventConfig(BaseModel):
    defaultTime: str
    expirationFee: str
    liquidityPercent: str
    maxAllowedMeasureLag: str
    maxMeasurePeriod: str
    maxPeriodToBetsClose: str
    measureStartFee: str
    minMeasurePeriod: str
    minPeriodToBetsClose: str
    minPoolSize: str
    oracleAddress: str
    rewardCallFee: str


class Key4(BaseModel):
    address: str
    nat: str


class ProvidedLiquidityAgainstItem(BaseModel):
    key: Key4
    value: str


class Key5(BaseModel):
    address: str
    nat: str


class ProvidedLiquidityForItem(BaseModel):
    key: Key5
    value: str


class BetsStorage(BaseModel):
    betsAgainst: List[BetsAgainstItem]
    betsFor: List[BetsForItem]
    closeCallId: Optional[str]
    depositedBets: List[DepositedBet]
    events: Dict[str, Events]
    lastEventId: str
    liquidityPrecision: str
    liquidityShares: List[LiquidityShare]
    manager: str
    measurementStartCallId: Optional[str]
    newEventConfig: NewEventConfig
    providedLiquidityAgainst: List[ProvidedLiquidityAgainstItem]
    providedLiquidityFor: List[ProvidedLiquidityForItem]
    ratioPrecision: str
    sharePrecision: str
    targetDynamicsPrecision: str
